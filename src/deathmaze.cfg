MEMORY {
    LOADADDR:       start = $0805,  size =     2,   file = %O;
    MAIN:           start = $0805,  size = $37FB,   file = %O, define=yes;
    TEST:           start = $0805,  size = $4000 - $0805,   file = %O;
    HGR2:           start = $4000,  size = $2000, define = yes;
    HIGH:           start = $6000,  size = $2000, define = yes,  file = %O;
}

SEGMENTS {
    LOADADDR:       load = LOADADDR, type = ro;

    START:                  load = MAIN, type = ro;
    PRINT_LINES:            load = MAIN, type = ro;
    PRINT_MESSAGE:          load = MAIN, type = ro;
    PRINT_CLEAR_BUFFER:     load = MAIN, type = ro;
    MAIN1:                  load = MAIN, type = ro;
    SPECIAL_POSITIONS:      load = MAIN, type = ro;
    MAIN2:                  load = MAIN, type = ro;
    MEMCPY:                 load = MAIN, type = ro;
    TEXT_BUFFERS:           load = MAIN, type = ro;
    INPUT1:                 load = MAIN, type = ro;
    WAIT_SHORT:             load = MAIN, type = ro;
#    INPUT2:                 load = MAIN, type = ro;
    MAIN3:                  load = MAIN, type = ro;
    WAIT_LONG:              load = MAIN, type = ro;
    COMMAND1:               load = MAIN, type = ro;
    PRINT_CLEAR_DISPLAY:    load = MAIN, type = ro;
    PIT:                    load = MAIN, type = ro;
    MAIN4:                  load = MAIN, type = ro;
    RASTER:                 load = MAIN, type = ro;
    PRINT_CHAR:             load = MAIN, type = ro;
    DRAW_MAZE:              load = MAIN, type = ro;
    SWAP_CODE_DUPE:         load = MAIN, type = ro;
    ITEM_COMMANDS:          load = MAIN, type = ro;
    FEATURES:               load = MAIN, type = ro;
    DATA_KEYHOLE:           load = MAIN, type = ro;
    DRAW_SPECIAL1:          load = MAIN, type = ro;
#    STRING_ELEVATOR:        load = MAIN, type = ro;
#    DRAW_SPECIAL2:          load = MAIN, type = ro;
    DATA_PIT_FLOOR:         load = MAIN, type = ro;
    DRAW_SPECIAL3:          load = MAIN, type = ro;
#    DATA_PIT_ROOF:          load = MAIN, type = ro;
#    DRAW_SPECIAL4:          load = MAIN, type = ro;
    DATA_SQUARE:            load = MAIN, type = ro;
    STRING_SQUARE:          load = MAIN, type = ro;
    DRAW_SPECIAL5:          load = MAIN, type = ro;
    PRINT_NOUN:             load = MAIN, type = ro;
    WAIT_BRIEF:             load = MAIN, type = ro;
    DRAW_JUNK:              load = MAIN, type = ro;
    COMMAND2:               load = MAIN, type = ro;
    DATA_DOOR:              load = MAIN, type = ro;
    COMMAND3:               load = MAIN, type = ro;
    DATA_TELEPORT:          load = MAIN, type = ro;
    COMMAND4:               load = MAIN, type = ro;
    SWAP_CODE:              load = MAIN, type = ro;
    COMMAND5:               load = MAIN, type = ro;
    STRING_HAT:             load = MAIN, type = ro;
    COMMAND6:               load = MAIN, type = ro;
    COMMAND_JUNK:           load = MAIN, type = ro;
    SPECIAL_MODES:          load = MAIN, type = ro;
    RELOCATOR:              load = MAIN, type = ro;
    RESET:                  load = MAIN, type = ro;
    RELOCATOR_JUNK:         load = MAIN, type = ro;

    MAZE:           load = HGR2, run = HIGH, type = ro;
    NEW_GAME:       load = HGR2, run = HIGH, type = ro;
    GAME_STATE:     load = HGR2, run = HIGH, type = rw, define=yes;
    SWAP_DATA:      load = HGR2, run = HIGH, type = rw; #
    SIGNATURE:      load = HGR2, run = HIGH, type = rw; #
    FONT:           load = HGR2, run = HIGH, type = ro;
    STRINGS:        load = HGR2, run = HIGH, type = ro;

    SAVE_GAME:      load = HGR2, run = HIGH, type = ro;    

    # Insert into GAME_STATE
#    SWAP_DATA:      load = HGR2, run = HIGH, start = $61F7, type = overwrite;
#    SIGNATURE:      load = HGR2, run = HIGH, start = $6200, type = overwrite;
}
